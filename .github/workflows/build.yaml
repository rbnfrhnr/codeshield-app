name: Build & Semantic Release

on:
  push:
    branches:
      - main
      - staging

jobs:
  release:
    name: Build and Release
    runs-on: ubuntu-latest

    env:
      PYTHON_VERSION: '3.11'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # needed for semantic-release to analyze commits

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install project dependencies
        run: poetry install --no-interaction

      - name: Set up Node.js for semantic-release
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install semantic-release and plugins
        run: |
          npm install -g semantic-release \
            @semantic-release/git \
            @semantic-release/changelog \
            @semantic-release/exec

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release
      - name: Build wheel package
        run: |
          poetry build
          mkdir -p build
          cp dist/*.whl build/

      - name: Extract version from wheel filename
        id: extract_version
        run: |
          WHEEL_FILE=$(ls dist/*.whl | head -n 1)
          echo "Found wheel: $WHEEL_FILE"
          # Extract version from filename: name-version-py3-none-any.whl
          VERSION=$(basename "$WHEEL_FILE" | sed -E 's/^[^-]+-([^-]+)-.*$/\1/')
          echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release with wheel
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.extract_version.outputs.version }}
          name: Release v${{ steps.extract_version.outputs.version }}
          files: build/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}