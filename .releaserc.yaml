branches:
  - main
  - staging:
      prerelease: rc
      channel: rc

plugins:
  - "@semantic-release/commit-analyzer"
  - "@semantic-release/release-notes-generator"
  - "@semantic-release/changelog"
  - 
    path: "@semantic-release/exec"
    prepareCmd: |
        # Determine if we are on the staging branch or not
        if [[ "${nextRelease.channel}" == "rc" ]]; then
          version="${nextRelease.version}-rc"
        else
          version="${nextRelease.version}"
        fi

        # Update __version__.py with the version
        sed --in-place 's/__version__ = ".*"/__version__ = "'${version}'"/' codeshieldapp/__version__.py

        # Update pyproject.toml with the version
        sed --in-place 's/version = ".*"/version = "'${version}'"/' pyproject.toml

        # Update poetry lock file and version
        poetry lock --no-update
        poetry version ${version}
  - 
    path: "@semantic-release/git"
    assets:
      - "CHANGELOG.md"
      - "pyproject.toml"
      - "codeshieldapp/__version__.py"
    message: "chore(release): ${nextRelease.version}-rc [skip ci]\n\n${nextRelease.notes}"

  - 
    path: "@semantic-release/github"
    assets:
      - "CHANGELOG.md"
      - "pyproject.toml"
      - "codeshieldapp/__version__.py"
    releaseName: "${nextRelease.version}"  # Ensure GitHub release uses the correct version
    prerelease: true  # Mark as a prerelease if it's an rc